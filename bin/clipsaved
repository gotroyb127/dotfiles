#!/bin/sh

set -o nounset

: "${CS_DIR:="${XDG_RUNTIME_DIR-"${TMPDIR-/tmp}"}"}"
: "${CS_SELECTIONS=primary clipboard}"
: "${CS_DEBUG=}"
: "${CS_MAXCACHED:=200}"
#"

tmpf=
cachedir=$CS_DIR/clipsave.$USER.$DISPLAY
lockfile=$cachedir/CS.lck
activecachesfile=$cachedir/ActiveCaches

if [ -n "$CS_DEBUG" ]
then
	b0=${0##*/}
	debug() {
		printf "$b0: %s\n" "$@" >&2
	}
	debug "Debuging is enabled."
else
	debug() { :; }
fi

_mv() {
	if ! mv "$@"
	then
		debug "mv $* returned $?."
	fi
}
_mktemp() {
	[ -f "$tmpf" ] && return 0
	tmpf=$(mktemp)
}
_xsel() {
	timeout 1 xsel -l /dev/null "$@"
}
die() {
	ret=$1
	shift
	printf '%s\n' "$b0: $*" >&2
	exit $ret
}
cleanup() {
	debug "Cleaning up '$cachedir'."
	rm -fR "$cachedir"
}
restart() {
	cleanbeforequit
	debug "Executing into '$0 $*'."
	exec "$0" "$@"
}
initFiles() {
	[ -f "$lockfile" ] &&
		die 5 "Lock file '$lockfile' exists. Maybe another instance is already running."
	rm -fR "$cachedir"
	mkdir -p -m0700 "$cachedir"
	touch "$activecachesfile" "$lockfile"
}
manageNewSel() {
	for sel in $CS_SELECTIONS
	do
		_mktemp
		_xsel --$sel -o > "$tmpf"
		_xsel -k
		tmpcksum=$(cksum "$tmpf")

		fname="$cachedir/${tmpcksum%% *}"

		if [ -z "$(cat "$tmpf")" ] || [ -f "$fname" ]
		then
			debug "Skipping caching from $sel."
			continue
		fi
		_mv -f "$tmpf" "$fname"
		debug "Grapped from $sel: '$fname'."

		printf '%s\n' "$fname" >> "$activecachesfile"
	done
}
manageCachedSel() {
	_mktemp
	tail "-$CS_MAXCACHED" "$activecachesfile" > "$tmpf"
	_mv -f "$tmpf" "$activecachesfile"

	{
		cat "$activecachesfile"
		printf '%s\n' "$cachedir/"[0-9]*
	} | sort | uniq -u |
		while read -r f
		do
			rm -f "$f"
		done
}

trap exit INT TERM
trap cleanup exit
trap restart HUP

initFiles
while true
do
	manageNewSel
	manageCachedSel

	debug 'Waiting for events...'
	clipnotify &
		wait $!

	[ $? != 0 ] &&
		exit
done
