#!/bin/sh

set -o nounset

: "${CS_DIR:="${XDG_RUNTIME_DIR-"${TMPDIR-/tmp}"}"}"
: "${CS_SELECTIONS=primary clipboard}"
: "${CS_DEBUG=}"
: "${CS_MAXCACHED:=1000}"
#"

tmpf=
cachedir=$CS_DIR/clipsave.$USER.$DISPLAY
lockf=$cachedir/CS.lck
activecachesf=$cachedir/ActiveCaches

if [ -n "$CS_DEBUG" ]
then
	b0=${0##*/}
	debug() {
		printf "$b0: %s\n" "$@" >&2
	}
	debug "Debuging is enabled."
else
	debug() { :; }
fi

_mv() {
	if ! mv "$@"
	then
		debug "mv $* returned $?."
	fi
}
_mktemp() {
	[ -f "$tmpf" ] &&
		return 0
	tmpf=$(mktemp)
}
_xsel() {
	timeout 1 xsel -l /dev/null "$@"
}
die() {
	ret=$1
	shift
	printf '%s\n' "$@"
	exit $ret
}
cleanup() {
	debug "Removing '$lockf'."
	rm -fR "$lockf"
}
restart() {
	cleanup
	debug "Executing into '$0'."
	exec "$0" "$@"
}
initFiles() {
	[ -f "$lockf" ] &&
		die 5 "Lock file '$lockf' exists. Maybe another instance is running."
	mkdir -p -m0700 "$cachedir"
	cd "$cachedir"
	debug "Chdir to '$cachedir'"
	touch "$activecachesf" "$lockf"
}
manageNewSel() {
	for sel in $CS_SELECTIONS
	do
		_mktemp
		_xsel --$sel -o > "$tmpf"

		[ -z "$(cat "$tmpf")"] && {
			debug "$sel seems empty. Skipping caching."
			continue
		}

		_xsel --$sel -i < "$tmpf"
		tmpcksum=$(cksum "$tmpf")

		name=${tmpcksum%% *}

		[ -f "$name" ] && {
			debug "$sel already cached. Skipping caching."
			continue
		}
		_mv -f "$tmpf" "$name"
		debug "Grapped from $sel: '$name'."

		printf '%s\n' "$name" >> "$activecachesf"
	done
}
manageCachedSel() {
	_mktemp
	tail "-$CS_MAXCACHED" "$activecachesf" > "$tmpf"

	debug 'Removing invalid entries...'
	{
		cat "$tmpf"
		ls | grep '^[0-9]\+$'
	} | sort | uniq -u |
		while read -r name
		do
			debug "Removing '$name'"
			rm -f "$name"
			sed -i "/$name/d" "$tmpf"
		done
	_mv -f "$tmpf" "$activecachesf"
}
Wait() {
	clipnotify &
		wait $!
}
Main() {
	while true
	do
		manageCachedSel
		manageNewSel

		debug 'Waiting for events...'
		Wait

		[ $? != 0 ] &&
			exit
	done
}

trap exit INT TERM
trap cleanup exit
trap restart HUP
trap 'manageCachedSel; Wait; Main' USR1

initFiles
Main
