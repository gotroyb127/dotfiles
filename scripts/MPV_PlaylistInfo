#!/bin/sh

. "$(which Player_lib.sh)"

PlaylistInfo() {
	echoPL() {
		cachedir="${TMPDIR-/tmp}/PlaylistInfo.cache"
		mkdir -p "$cachedir"
		IFS='
'
		for fname in $*
		do
			cachepath="$cachedir/$fname.cache"
			if ! [ -f "$cachepath" ]
			then
				mkdir -p "${cachepath%/*}"
				ffprobe -v error -show_entries format=duration \
					-of default=noprint_wrappers=1:nokey=1 "$fname" \
					2> /dev/null > "$cachepath"
			fi
			printf '%s\n' "$fname"
			cat "$cachepath"
		done
	}
	SetInfoVars "N            PL       CT       RT                 Speed"\
	            "playlist-pos playlist time-pos playtime-remaining speed"
	PL=$(printf '%s\n' "$PL" | jq -r '.[] | .filename')
	PL=$(echoPL "$PL")
	printf '%s\n' "$PL" |
		awk -v N="$((N+1))" -v SP="$Speed" \
		    -v CT="$CT" -v RD="$RT" \
		    -v c1='\033[33m' -v c2='\033[00m' \
		'function SecsToTime(t) {
			s = int(t % 60)
			m = int((t/60) % 60)
			h = int(t / 3600)
			if (h != 0)
				o = sprintf("%d:%d:%d", h, m, s)
			else if (m != 0)
				o = sprintf("%d:%d", m, s)
			else
				o = sprintf("%d", s)
			return o
		} (NR % 2) {
			sub("^/.*/", "")
			sub("\\.[^.]+$", "")
			title = $0
			sub(".*/", "", title)
			if ((NR + 1) / 2 == N)
				BD = CT + TD
		} !(NR % 2) {
			TD += $1
			$0 = SecsToTime($0)
			if (NR / 2 == N) {
				cb = c1
				ce = c2
			} else {
				cb = ""
				ce = ""
			}
			printf("%-8s%s%s%s\n", $0, cb, title, ce)
		} END {
			TRD = SecsToTime((TD - BD) / SP)
			BD = SecsToTime(BD)
			TD = SecsToTime(TD)
			idx = sprintf("(%s/%s)", N, NR/2)
			printf("%-16s[%s %s] (-%s) x%s",
			       idx, BD, TD, TRD, SP)
		}'
}
Echo() {
	[ "$neednl" = y ] && {
		echo
		neednl=n
	}
}
Print() {
	S=$(PlaylistInfo) || {
		r=$?
		Echo
		return $r
	}
	LF_Clear
	printf "%s\t" "$S"
	neednl=y
}
Wait() {
	r=$?
	[ $r != 0 ] &&
		ret="[$r] "
	Echo
	printf '%s%s' "$ret" 'Waiting... : '
	read ans
	case $ans in
	(q*)
		exit 0
	;;
	(c*)
		clear
		Wait
	;;
	(r*)
		exec "$0" "$@"
	;;
	esac
}
Main() {
	while true
	do
		Print || Wait
		sleep .94
	done
}

[ $# -gt 0 ] || ! tty > /dev/null 2>&1 && {
	PlaylistInfo
	echo
	exit
}

trap 'neednl=y; Wait; Main' INT

neednl=n
Main
