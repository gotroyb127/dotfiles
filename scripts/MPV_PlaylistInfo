#!/bin/sh

. "$(which Player_lib.sh)"

Sleep() {
	sleep "$1" &
		wait $!
}
PlaylistInfo() {
	set -e
	echoPL() {
		cachedir="${TMPDIR-/tmp}/PlaylistInfo.cache"
		mkdir -p "$cachedir"
		IFS='
'
		for fname in $*
		do
			cachepath="$cachedir/$fname.cache"
			if ! [ -f "$cachepath" ]
			then
				mkdir -p "${cachepath%/*}"
				ffprobe -v error -show_entries format=duration \
					-of default=noprint_wrappers=1:nokey=1 "$fname" \
					2> /dev/null > "$cachepath"
			fi
			printf '%s\n' "$fname"
			cat "$cachepath"
		done
	}
	SetInfoVars "N            PL       CT       Speed pause"\
	            "playlist-pos playlist time-pos speed pause"
	PL=$(printf '%s\n' "$PL" | jq -r '.[] | .filename')
	PL=$(echoPL "$PL")
	printf '%s\n' "$PL" |
		awk -v N="$((N+1))" -v SP="$Speed" \
			-v CT="$CT" -v pause="$pause" \
			-v c1='\033[33m' -v c2='\033[00m' \
		'function SecsToTime(t) {
			s = int(t % 60)
			m = int((t/60) % 60)
			h = int(t / 3600)
			if (h != 0)
				o = sprintf("%d:%d:%d", h, m, s)
			else if (m != 0)
				o = sprintf("%d:%d", m, s)
			else
				o = sprintf("%d", s)
			return o
		} (NR % 2) {
			sub("^/.*/", "")
			sub("\\.[^.]+$", "")
			title = $0
			sub(".*/", "", title)
			if ((NR + 1) / 2 == N)
				BD = CT + TD
		} !(NR % 2) {
			TD += $1
			$0 = SecsToTime($0)
			if (NR / 2 == N) {
				cb = c1
				ce = c2
			} else {
				cb = ""
				ce = ""
			}
			printf("%-8s%s%s%s\n", $0, cb, title, ce)
		} END {
			TRD = SecsToTime((TD - BD) / SP)
			BD = SecsToTime(BD)
			TD = SecsToTime(TD)
			idx = sprintf("(%s/%s)", N, NR/2)
			pSmbl = pause == "false" ? "" : ""
			printf("%-16s[%s %s] (-%s) x%s %s",
				idx, BD, TD, TRD, SP, pSmbl)
		}'
}
Print() {
	S=$(PlaylistInfo) ||
		return $?
	neednl=y
	LF_Clear
	printf '%s\t' "$S"
}
Read() {
	[ "X$neednl" = Xy ] &&
		echo
	printf 'Action: '
	read -r ans
	case $ans in
	(c*)
		clear
		Read
	;;
	(q*)
		exit 0
	;;
	(r*)
		echo exec "$0"
		exec "$0"
	;;
	esac
	neednl=n
}
Main() {
	while true
	do
		Print ||
			Read
		Sleep .94
	done
}

[ $# -gt 0 ] && [ "X$1" = X-o ] && {
	PlaylistInfo
	echo
	exit
}

neednl=n
trap 'echo; Read; Main' INT
trap 'Sleep 1; Main' USR1
trap 'neednl=y; Main' USR2

Main
