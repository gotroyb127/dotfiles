#!/bin/sh
# ^^^ trick vim to syntax highlihght

set hidden
set color256
set dircounts
set incsearch
set info size
set number
set relativenumber
set period 1
set findlen 0
set scrolloff 5
set previewer ~/.local/etc/lf/scope.sh
set promptfmt "\033[0;38;5;7m[\033[0;38;5;45m%u\033[0;38;5;195m@\033[0;38;5;42m%h\033[0;38;5;7m]:\033[1;38;5;105m%w/\033[0;38;5;15m%f\033[0m"
set shell mksh

cmd wait $bash -c 'read -sn1'
cmd open ${{ IFS=$'\n'; Open.sh "$f" }}
cmd OpenSel ${{ IFS=$'\n' Open.sh "$fx" }}

cmd SelRecurs %{{
	IFS=$'\n'
	[[ ! -d $f ]] && exit 0
	for d in $(find $f -type d | sort); do
		lf -remote "send $id select '$d'"$'\n'\
\	\	\	"send $id open"$'\n'\
\	\	\	"send $id invert"
	done
	lf -remote "send $id select '$f'"
}}

cmd delete ${{
	IFS=$'\n'
	clear
	echo -n "---\tFiles to be deleted:\t---\n\n$fx\n\nDelete? [Y/n]: " \
	| sed "s/^${HOME//\//\\/}/~/g"
	read -n1 ans
	[[ $ans = !(y|Y) ]] && exit 0;
	mkdir -p /tmp/Trash
	chmod 777 /tmp/Trash
	a=0
#	for f in $fx; do
#		mv $f /tmp/Trash
#		((++a))
	DEST=/tmp/Trash
	for i in $fx; do
		((++a))
		d=$(dirname "$i")
		[[ $d = $DEST ]] && continue
		i=$(basename "$i")
		! [[ -e $DEST/$i ]] && 
			mv -i "$d/$i" $DEST &&
			continue
		s=$(echo $i | grep -o ' ([0-9]\+)$' | head -n1 | tr -d '()')
		[[ -z $s ]] && s=1 || ((++s))
		p=$(echo $i | sed 's/\ ([0-9]*)$//g')
		newn="$DEST/$p ($s)"
		echo $newn
		while [[ -e $newn ]]; do
			newn="$DEST/$p ($((++s)))"
		done
		mv -i "$d/$i" "$newn"
	done
	echo -e "\n--- $a Objects moved to /tmp/Trash. ---"
	bash -c 'read -sn1'
}}

cmd trash ${{
	IFS=$'\n'
	DEST=~/.local/trash
	for i in $fx; do
		d=$(dirname "$i")
		[[ $d = $DEST ]] && continue
		i=$(basename "$i")
		! [[ -e $DEST/$i ]] && 
			mv -iv "$d/$i" $DEST &&
			continue
		s=$(echo $i | grep -o ' ([0-9]\+)$' | head -n1 | tr -d '()')
		[[ -z $s ]] && s=1 || ((++s))
		p=$(echo $i | sed 's/\ ([0-9]*)$//g')
		newn="$DEST/$p ($s)"
		echo $newn
		while [[ -e $newn ]]; do
			newn="$DEST/$p ($((++s)))"
		done
		mv -iv "$d/$i" "$newn"
	done
}}

cmd paste %{{
	IFS=$'\t\n'
	load=$(lf -remote 'load')
	mode=$(echo "$load" | sed -n '1p')
	list=$(echo "$load" | sed '1d')
	if [[ $mode = copy ]]; then
	    Op=$'cp\t-nR'
	elif [[ $mode = move ]]; then
	    Op=$'mv\t-n'
	fi
	DEST=$(pwd)
	for i in $list; do
		d=$(dirname $i)
		[[ $d = $DEST && mode = move ]] && continue
		i=$(basename $i)
		! [[ -e $DEST/$i ]] && 
			$Op "$d/$i" $DEST &&
			continue
		s=$(echo $i | grep -o ' ([0-9]\+)$' | head -n1 | tr -d '()')
		[[ -z $s ]] && s=1 || ((++s))
		p=$(echo $i | sed 's/\ ([0-9]*)$//g')
		newn="$DEST/$p ($s)"
		echo $newn
		while [[ -e $newn ]]; do
			newn="$DEST/$p ($((++s)))"
		done
		$Op $d/$i $newn
	done
	lf -remote 'send load'$'\n'\
\	\	'send clear'
}}

cmd recol %{{
	w=$(tput cols)
	if [ $w -le 75 ]; then
		lf -remote "send $id set nopreview"$'\n'\
\	\	"send $id set ratios 1"
	elif [ $w -le 220 ]; then
		lf -remote "send $id set ratios 5:8"$'\n'\
\	\	"send $id set preview"
	else
		lf -remote "send $id set ratios 3:8"$'\n'\
\	\	"send $id set preview"
	fi
}}
cmd Recol :recol

cmd yankname &{{
	if [ -z "$f" ]; then
		t="$PWD"
	else
		t="$f"
	fi
	basename "$t" | tr -d '\n' | xclip
	echo -n "$t" | xclip -sel clipboard
}}

cmd resource :source ~/.config/lf/lfrc
map R :resource; %sleep .01 && lf -remote "send $id echoerr 'Configuration file (~/.config/lf/lfrc) loaded.'"

# Replace less as a pager
map i $vim -MR "$f"

map <c-l> :Recol
map <c-r> :redraw; reload
map c :clear; unselect
map C $IFS=$'\n'; vidir -v $fx && bash -c 'read -sn1'
map D push $mkdir<space>""<left>
map x push $chmod<space>+x<space>"$f"
map X $clear && "$f" && bash -c 'read -sn1'

map <delete> :trash
map t $tmux splitw -h lf "$PWD"
map T $tmux splitw -v lf "$PWD"
map Y :yankname; echoerr Filename Yanked.
map M :SelRecurs
map L :OpenSel

map a %du -hd0 "$f"
map A $clear && du -hd1 | sort -k 1 -rh && ls -aSlh | grep -v '^d\|^l' | awk '{printf("%s\t%s \n", $5, $9) }' && bash -c 'read -sn1'
map S $clear && echo "$fx" | sort -n && bash -c 'read -sn1'
map bb :set drawbox!
map bv :set preview!
map bn :set relativenumber!
map bN :set number!

map sn :set sortby natural
map sN :set sortby name

map <esc> cmd-escape

map gr cd /
map gl cd ~/.local
map gc cd ~/.local/etc
map gs cd ~/.local/scripts
map gt cd ~/.local/trash
map gd cd ~/Documents
map gD cd ~/Downloads

set ratios '5:8'
Recol

